rule Exploit_MSIL_CVE_2013_0074_A_2147684193_0
{
    meta:
        author = "defender2yara"
        detection_name = "Exploit:MSIL/CVE-2013-0074.A"
        threat_id = "2147684193"
        type = "Exploit"
        platform = "MSIL: .NET intermediate language scripts"
        family = "CVE-2013-0074"
        severity = "Critical"
        signature_type = "SIGNATURE_TYPE_PEHSTR_EXT"
        threshold = "31"
        strings_accuracy = "Low"
    strings:
        $x_1_1 = {0a 17 17 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_2 = {0a 17 16 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_3 = {0a 16 17 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_4 = {0a 16 16 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_5 = {0a 06 17 17 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_6 = {0a 06 17 16 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_7 = {0a 06 16 17 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_1_8 = {0a 06 16 16 28 ?? 00 00 0a}  //weight: 1, accuracy: Low
        $x_10_9 = {00 48 74 6d 6c 4f 62 6a 65 63 74 00}  //weight: 10, accuracy: High
        $x_10_10 = {00 53 79 73 74 65 6d 2e 57 69 6e 64 6f 77 73 2e 42 72 6f 77 73 65 72 00}  //weight: 10, accuracy: High
        $x_10_11 = {00 53 63 72 69 70 74 4f 62 6a 65 63 74 00}  //weight: 10, accuracy: High
    condition:
        (filesize < 20MB) and
        (uint16(0) == 0x5a4d) and
        (
            ((3 of ($x_10_*) and 1 of ($x_1_*))) or
            (all of ($x*))
        )
}

rule Exploit_MSIL_CVE_2013_0074_F_2147689992_0
{
    meta:
        author = "defender2yara"
        detection_name = "Exploit:MSIL/CVE-2013-0074.F"
        threat_id = "2147689992"
        type = "Exploit"
        platform = "MSIL: .NET intermediate language scripts"
        family = "CVE-2013-0074"
        severity = "Critical"
        signature_type = "SIGNATURE_TYPE_PEHSTR_EXT"
        threshold = "7"
        strings_accuracy = "Low"
    strings:
        $x_1_1 = ":Class=\"asdgsd.miry\"" ascii //weight: 1
        $x_1_2 = {31 00 38 00 36 00 ?? ?? 38 00 38 00 ?? ?? 74 00 75 00 74 00 69 00}  //weight: 1, accuracy: Low
        $x_1_3 = {32 00 33 00 35 00 ?? ?? 32 00 34 00 35 00 ?? ?? 32 00 35 00 32 00 ?? ?? 31 00 38 00 32 00 ?? ?? 31 00 37 00 37 00}  //weight: 1, accuracy: Low
        $x_1_4 = {32 00 31 00 38 00 ?? ?? 31 00 34 00 37 00 ?? ?? 31 00 35 00 38 00 ?? ?? 31 00 35 00 35 00 ?? ?? 31 00 34 00 32 00}  //weight: 1, accuracy: Low
        $x_1_5 = "/asdgsd;component/App.xaml" wide //weight: 1
        $x_1_6 = "asdgsd.chaiki" wide //weight: 1
        $x_1_7 = {04 4c 6f 6f 70 [0-16] 24 39 36 46 34 41 30 35 30}  //weight: 1, accuracy: Low
    condition:
        (filesize < 20MB) and
        (uint16(0) == 0x5a4d) and
        (all of ($x*))
}

rule Exploit_MSIL_CVE_2013_0074_G_2147690185_0
{
    meta:
        author = "defender2yara"
        detection_name = "Exploit:MSIL/CVE-2013-0074.G"
        threat_id = "2147690185"
        type = "Exploit"
        platform = "MSIL: .NET intermediate language scripts"
        family = "CVE-2013-0074"
        severity = "Critical"
        signature_type = "SIGNATURE_TYPE_PEHSTR_EXT"
        threshold = "5"
        strings_accuracy = "High"
    strings:
        $x_1_1 = "x:Class=\"hsaytvxw17.App\"" ascii //weight: 1
        $x_1_2 = "hsaytvxw17.g.resources" ascii //weight: 1
        $x_1_3 = "xmlns:local=\"using:AlarmPro\"" ascii //weight: 1
        $x_1_4 = "uria.pooh" wide //weight: 1
        $x_1_5 = "pede5" wide //weight: 1
        $x_1_6 = "/hsaytvxw17;component/MainPage.xaml" wide //weight: 1
    condition:
        (filesize < 20MB) and
        (uint16(0) == 0x5a4d) and
        (5 of ($x*))
}

rule Exploit_MSIL_CVE_2013_0074_I_2147691531_0
{
    meta:
        author = "defender2yara"
        detection_name = "Exploit:MSIL/CVE-2013-0074.I"
        threat_id = "2147691531"
        type = "Exploit"
        platform = "MSIL: .NET intermediate language scripts"
        family = "CVE-2013-0074"
        severity = "Critical"
        signature_type = "SIGNATURE_TYPE_PEHSTR_EXT"
        threshold = "4"
        strings_accuracy = "Low"
    strings:
        $x_1_1 = {46 00 72 00 6f 00 6d 00 42 00 61 00 73 00 65 00 36 00 34 00 53 00 74 00 72 00 69 00 6e 00 67 00 ?? ?? 74 00 75 00 74 00 69 00}  //weight: 1, accuracy: Low
        $x_1_2 = {3b 00 63 00 6f 00 6d 00 70 00 6f 00 6e 00 65 00 6e 00 74 00 2f 00 4d 00 61 00 69 00 6e 00 50 00 61 00 67 00 65 00 2e 00 78 00 61 00 6d 00 6c 00 ?? ?? 4c 00 61 00 79 00 6f 00 75 00 74 00 52 00 6f 00 6f 00 74 00}  //weight: 1, accuracy: Low
        $x_1_3 = "\\EXP\\SilverApp1\\SilverApp1\\obj\\Debug\\" ascii //weight: 1
        $x_1_4 = {44 44 44 44 61 10 01 03 20 33 33 33 33 60 10 01 03 20 22 22 22 22 58 10 01 03 16 fe 01 0b 07 2d}  //weight: 1, accuracy: High
    condition:
        (filesize < 20MB) and
        (uint16(0) == 0x5a4d) and
        (all of ($x*))
}

rule Exploit_MSIL_CVE_2013_0074_J_2147691532_0
{
    meta:
        author = "defender2yara"
        detection_name = "Exploit:MSIL/CVE-2013-0074.J"
        threat_id = "2147691532"
        type = "Exploit"
        platform = "MSIL: .NET intermediate language scripts"
        family = "CVE-2013-0074"
        severity = "Critical"
        signature_type = "SIGNATURE_TYPE_PEHSTR_EXT"
        threshold = "3"
        strings_accuracy = "Low"
    strings:
        $x_1_1 = {3b 00 63 00 6f 00 6d 00 70 00 6f 00 6e 00 65 00 6e 00 74 00 2f 00 4d 00 61 00 69 00 6e 00 50 00 61 00 67 00 65 00 2e 00 78 00 61 00 6d 00 6c 00 ?? ?? 4c 00 61 00 79 00 6f 00 75 00 74 00 52 00 6f 00 6f 00 74 00 ?? ?? 50 00 72 00 6f 00 67 00 72 00 65 00 73 00 73 00 ?? ?? 44 00 6f 00 77 00 6e 00 6c 00 6f 00 61 00 64 00 65 00 64 00}  //weight: 1, accuracy: Low
        $x_1_2 = {64 00 73 00 66 00 76 00 62 00 65 00 67 00 72 00 65 00 66 00 67 00 72 00 34 00 33 00 2e 00 64 00 6c 00 6c 00 ?? ?? 64 00 61 00 76 00 73 00 66 00 72 00 77 00 67 00 66 00 33 00 77 00 32 00 32 00 32 00 2e 00 4d 00 61 00 69 00 6e 00 50 00 61 00 67 00 65 00}  //weight: 1, accuracy: Low
        $x_1_3 = "\\EXP\\SILVER_Preloader\\Preloader\\obj\\Debug\\" ascii //weight: 1
        $x_1_4 = {73 00 61 00 66 00 64 00 66 00 77 00 33 00 71 00 77 00 64 00 73 00 66 00 2e 00 64 00 6c 00 6c 00 ?? ?? 53 00 69 00 6c 00 76 00 65 00 72 00 41 00 70 00 70 00 31 00 2e 00 4d 00 61 00 69 00 6e 00 50 00 61 00 67 00 65 00}  //weight: 1, accuracy: Low
    condition:
        (filesize < 20MB) and
        (uint16(0) == 0x5a4d) and
        (3 of ($x*))
}

